{"version":3,"names":[],"mappings":"","sources":["assets/components/extraext/js/inputs.min.js"],"sourcesContent":["\nextraExt.inputs={}\nextraExt.inputs.modCombo={}\nextraExt.inputs.modCombo.xtype='extraExt-modCombo'\nextraExt.requireConfigField[extraExt.inputs.modCombo.xtype]=['action','displayField','valueField','fields','url',]\nextraExt.xTypes[extraExt.inputs.modCombo.xtype]=function(config){config=config||{}\nvar requireConfigField=extraExt.requireConfigField[this.xtype||config.xtype].slice()\nvar errorConfig=[]\nthis.ident=config.ident||'mecnewsletter'+Ext.id()\nExt.applyIf(config,{url:MODx.config.connector_url,anchor:'99%',editable:true,pageSize:20,mode:'remote',fields:['id'],hiddenName:config.name,displayField:'id',valueField:'id',preventRender:true,forceSelection:true,enableKeyEvents:true,})\nconfig.baseParams=Object.assign({action:config.action},config.baseParams)\nconfig.store=new Ext.data.JsonStore({id:(config.name||Ext.id())+'-store',root:'results',autoLoad:true,autoSave:false,totalProperty:'total',fields:config.fields,url:config.url,baseParams:config.baseParams})\nfor(const key of requireConfigField){if(config.hasOwnProperty(key)){if(extraExt.empty(config[key])){errorConfig.push(key)}}else{errorConfig.push(key)}}\nif(errorConfig.length>0){console.error(`ExtraExt: invalid require config [${this.xtype || config.xtype}]`,errorConfig)\nreturn false}\nextraExt.xTypes[extraExt.inputs.modCombo.xtype].superclass.constructor.call(this,config)}\nExt.extend(extraExt.xTypes[extraExt.inputs.modCombo.xtype],MODx.combo.ComboBox)\nExt.reg(extraExt.inputs.modCombo.xtype,extraExt.xTypes[extraExt.inputs.modCombo.xtype])\nextraExt.inputs.modComboSuper={}\nextraExt.inputs.modComboSuper.requireConfigField=['action','displayField','valueField','fields','url',]\nextraExt.inputs.modComboSuper.xtype='extraExt-modComboSuper'\nextraExt.xTypes[extraExt.inputs.modComboSuper.xtype]=function(config){var requireConfigField=extraExt.inputs.modComboSuper.requireConfigField.slice()\nvar errorConfig=[]\nconfig=config||{}\nconfig.url=MODx.config.connector_url\nExt.applyIf(config,{xtype:'superboxselect',allowBlank:true,msgTarget:'under',allowAddNewData:true,addNewDataOnBlur:true,width:'100%',editable:true,pageSize:20,preventRender:true,forceSelection:true,enableKeyEvents:true,minChars:2,hiddenName:config.name+'[]',mode:'remote',displayField:'id',valueField:'id',triggerAction:'all',extraItemCls:'x-tag',expandBtnCls:'x-form-trigger',clearBtnCls:'x-form-trigger',listeners:{newitem:function(config,v,f){bs.addItem({tag:v})}},renderTo:Ext.getBody()})\nif(!config.hasOwnProperty('id')||!config.id){config.id=Ext.id()}\nconfig.baseParams=Object.assign({action:config.action},config.baseParams)\nconfig.store=new Ext.data.JsonStore({id:(config.name||Ext.id())+'-store',root:'results',autoLoad:true,autoSave:false,totalProperty:'total',fields:config.fields,url:config.url,baseParams:config.baseParams})\nif(config.hasOwnProperty('table')&&config.table.hasOwnProperty('requestDataType')&&config.table.requestDataType=='json'){config.hiddenName=config.name}else{config.hiddenName=config.name+'[]'}\nextraExt.xTypes[extraExt.inputs.modComboSuper.xtype].superclass.constructor.call(this,config)}\nExt.extend(extraExt.xTypes[extraExt.inputs.modComboSuper.xtype],Ext.ux.form.SuperBoxSelect)\nExt.reg(extraExt.inputs.modComboSuper.xtype,extraExt.xTypes[extraExt.inputs.modComboSuper.xtype])\nextraExt.inputs.Submit=function(b,a){extraExt.inputs.Submit.superclass.constructor.call(this,b,a)}\nExt.extend(extraExt.inputs.Submit,Ext.form.Action.Submit,{type:'submit',run:function(){var e=this.options,g=this.getMethod(),d=g=='GET'\nif(e.clientValidation===false||this.form.isValid()){if(e.submitEmptyText===false){var a=this.form.items,c=[],b=function(h){if(h.el.getValue()==h.emptyText){c.push(h)\nh.el.dom.value=''}\nif(h.isComposite&&h.rendered){h.items.each(b)}}\na.each(b)}\nvar params=this.form.baseParams\nparams.data=Ext.util.JSON.encode(this.form.getValues())\nExt.Ajax.request(Ext.apply(this.createCallback(e),{params:params,url:this.getUrl(d),method:g,headers:e.headers,isUpload:this.form.fileUpload}))\nif(e.submitEmptyText===false){Ext.each(c,function(h){if(h.applyEmptyText){h.applyEmptyText()}})}}else{if(e.clientValidation!==false){this.failureType=Ext.form.Action.CLIENT_INVALID\nthis.form.afterAction(this,false)}}}})\n//# sourceMappingURL=inputs.min.js.map\n"],"file":"inputs.min.js"}