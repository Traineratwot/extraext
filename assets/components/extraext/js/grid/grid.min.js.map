{"version":3,"names":[],"mappings":"","sources":["assets/components/extraext/js/grid/grid.min.js"],"sourcesContent":["\nextraExt.grid.xtype='extraExt-grid'\nextraExt.requireConfigField[extraExt.grid.xtype]=['action','url','fields','columns',]\nextraExt.xTypes[extraExt.grid.xtype]=function(config){config=config||{}\nvar requireConfigField=extraExt.requireConfigField[this.xtype||config.xtype].slice()\nvar errorConfig=[]\nconfig=Object.assign({id:Ext.id(),extraExtSearch:false,requestDataType:'default',searchKey:'query',tbar:[],columns:[{dataIndex:'id',header:'id',sortable:true,renderer:extraExt.grid.renderers.default},],fields:['id'],url:MODx.config.connector_url,action:'resource/getlist',save_action:'',create_action:'',delete_action:'',paging:true,autoHeight:true,autoSize:true,anchor:'95%',autoExpandColumn:'content',viewConfig:{forceFit:true,enableRowBody:true,autoFill:true,showPreview:true,scrollOffset:0,},remoteSort:true,extraExtMenus:{},keyField:'id',nameField:'id',sortBy:config.keyField,sortDir:'ASC',extraExtSearch:false,extraExtUpdate:false,extraExtCreate:false,extraExtDelete:false,},config)\nif(config.extraExtCreate&&config.create_action){config.tbar.unshift({xtype:'button',text:_('extraExt.create'),cls:'primary-button',handler:()=>{MODx.load({xtype:extraExt.grid.editor.xtype,title:_('extraExt.create')+` ${config.name}`,type:'add',table:this,}).show()},})}\nif(config.extraExtSearch&&config.searchKey){config.extraExtSearchFn=function(tf,nv,ov){var s=this.getStore()\nvar val=tf.getValue()\nif(val){s.baseParams[this.searchKey]=tf.getValue()}else{s.baseParams[this.searchKey]=null\ndelete s.baseParams[this.searchKey]}\nthis.getBottomToolbar().changePage(1)\nthis.refresh()}\nconfig.tbar.push({xtype:'textfield',emptyText:_('extraExt.search'),listeners:{'change':{fn:function(){this.extraExtSearchFn.call(this,...arguments)},scope:this},'render':{fn:function(cmp){new Ext.KeyMap(cmp.getEl(),{key:Ext.EventObject.ENTER,fn:function(){this.fireEvent('change',this)\nthis.blur()\nreturn true},scope:cmp})},scope:this}}})}\nif(config.extraExtUpdate&&config.save_action){config.extraExtUpdateFn=function(){var cs=this.getSelectedPrimaryKey()\nvar self=this\nvar row=this.getSelectionModel().getSelections()[0]\nvar data=row.data\nMODx.load({xtype:extraExt.grid.editor.xtype,title:_('extraExt.update')+` ${data[self.nameField]}`,updateData:data,type:'update',table:self,row:row,}).show()}\nconfig.extraExtMenus.update=(grid,rowIndex)=>{return{text:_('extraExt.update'),grid:grid,rowIndex:rowIndex,handler:this.extraExtUpdateFn}}}\nif(config.extraExtDelete&&config.delete_action){config.extraExtDeleteFn=function(){var cs=this.getSelectedAsList()\nvar self=this\nvar url=this.url\nvar params={action:this.delete_action,}\nparams[this.keyField]=cs\nMODx.msg.confirm({title:_('delete'),text:_('confirm_remove'),url:url,params:params,listeners:{'success':{fn:function(r){if(!r.success){MODx.msg.status({title:_('undeleted'),message:_('extraExt.html.failure'),delay:3})}else{MODx.msg.status({title:_('delete'),message:_('extraExt.html.success'),delay:3})}\nself.refresh()},scope:true},'failure':{fn:function(r){MODx.msg.status({title:_('undeleted'),message:_('extraExt.html.failure'),delay:3})},scope:true}}})}\nconfig.extraExtMenus.delete=(grid,rowIndex)=>{return{text:_('delete'),grid:grid,rowIndex:rowIndex,handler:this.extraExtDeleteFn}}}\nconfig.getMenu=function(grid,rowIndex){var m=[]\nfor(const menu in config.extraExtMenus){if(config.extraExtMenus.hasOwnProperty(menu)){if(config.extraExtMenus[menu]instanceof Function){m.push(config.extraExtMenus[menu](grid,rowIndex))}}}\nthis.addMenu(m)\nreturn m}\nif(config.extraExtUpdate||config.extraExtCreate){requireConfigField.push('nameField')\nrequireConfigField.push('keyField')}\nif(config.extraExtSearch){requireConfigField.push('searchKey')}\nif(config.extraExtUpdate){requireConfigField.push('save_action')}\nif(config.extraExtCreate){requireConfigField.push('create_action')}\nif(config.extraExtDelete){requireConfigField.push('delete_action')}\nfor(const key of requireConfigField){if(config.hasOwnProperty(key)){if(extraExt.empty(config[key])){errorConfig.push(key)}}else{errorConfig.push(key)}}\nif(errorConfig.length>0){console.error(`ExtraExt: invalid require config [${this.xtype || config.xtype}]`,errorConfig)\nreturn false}\nthis.saveRecord=function(e){e.record.data.menu=null\nvar p=this.config.saveParams||{}\nExt.apply(e.record.data,p)\nvar url=this.config.saveUrl||this.config.url||this.config.connector\nvar params={action:this.config.save_action}\nif(this.requestDataType=='json'){var d=Ext.util.JSON.encode(e.record.data)\nObject.assign(params,{data:d})}else{Object.assign(params,e.record.data)}\nMODx.Ajax.request({url:url,params:params,listeners:{success:{fn:function(r){this.config.save_callback&&Ext.callback(this.config.save_callback,this.config.scope||this,[r]),e.record.commit(),this.config.preventSaveRefresh||this.refresh(),this.fireEvent('afterAutoSave',r)},scope:this},failure:{fn:function(r){e.record.reject(),this.fireEvent('afterAutoSave',r)},scope:this}}})}\nthis.getSelectedPrimaryKey=function(){var selects=this.getSelectionModel().getSelections()\nif(selects.length<=0)return false\nvar cs=''\nfor(var i=0;i<selects.length;i++){cs+=','+selects[i].data[this.keyField]}\ncs=cs.substr(1)\nreturn cs}\nthis.addMenu=function(m){}\nextraExt.xTypes[extraExt.grid.xtype].superclass.constructor.call(this,config)}\nExt.extend(extraExt.xTypes[extraExt.grid.xtype],MODx.grid.Grid)\nExt.reg(extraExt.grid.xtype,extraExt.xTypes[extraExt.grid.xtype])\nextraExt.grid.grid=extraExt.xTypes[extraExt.grid.xtype]\n//# sourceMappingURL=grid.min.js.map\n"],"file":"grid.min.js"}