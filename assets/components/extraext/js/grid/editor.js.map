{"version":3,"names":[],"mappings":"","sources":["assets/components/extraext/js/grid/editor.js"],"sourcesContent":["extraExt.grid.editor = {}\nextraExt.grid.editor.xtype = 'extraExt-grid-editor'\nextraExt.requireConfigField[extraExt.grid.editor.xtype] = [\n\t'action',\n\t'url',\n\t'fields',\n]\nextraExt.xTypes[extraExt.grid.editor.xtype] = function(config) {\n\tconfig = config || {}\n\tvar requireConfigField = extraExt.requireConfigField[this.xtype || config.xtype].slice()\n\tvar errorConfig = []\n\tvar warnConfig = []\n\tvar table = config.table\n\tvar row = config.table\n\tvar columns = config.columns\n\tvar type = config.type || 'add'\n\tvar ident = `extraExt-grid-editor_${type}_${row.id}_${Ext.id()}`\n\tvar _updateData = {}\n\tvar fields = []\n\tconfig.url = table.url\n\tconfig.requestDataType = table.requestDataType\n\tswitch( type ) {\n\t\tcase 'add':\n\t\t\tconfig.action = table.create_action\n\t\t\tbreak\n\t\tdefault:\n\t\t\t//устанавливаем поля из таблицы\n\t\t\tfor(const fieldKey in table.fields) {\n\t\t\t\tif(table.fields.hasOwnProperty(fieldKey)) {\n\t\t\t\t\tconst field = table.fields[fieldKey]\n\t\t\t\t\t_updateData[field] = null\n\t\t\t\t}\n\t\t\t}\n\t\t\tconfig.updateData = Object.assign(_updateData, config.updateData)\n\t\t\tconfig.action = table.save_action\n\t\t\tbreak\n\t}\n\t//генерация полей\n\tfor(const colKey in table.colModel.lookup) {\n\t\tif(table.colModel.lookup.hasOwnProperty(colKey)) {\n\t\t\tconst col = table.colModel.lookup[colKey]\n\t\t\tvar xtype = 'hidden'\n\t\t\tvar editor = {\n\t\t\t\ttable: table,\n\t\t\t\tchangeable: true,\n\t\t\t\tvisible: true,\n\t\t\t\txtype: 'textfield',\n\t\t\t\tname: col.dataIndex,\n\t\t\t\tfieldLabel: col.header,\n\t\t\t\tid: `${col.dataIndex}_${type}_${ident}`,\n\t\t\t\tanchor: '99%',\n\t\t\t\tallowBlank: true,\n\t\t\t}\n\t\t\tif(col.hasOwnProperty('renderer')) {\n\t\t\t\tif(col.renderer instanceof Function)\n\t\t\t\t\tswitch( col.renderer.name ) {\n\t\t\t\t\t\tcase 'BOOL':\n\t\t\t\t\t\t\teditor.xtype = 'combo-boolean'\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase 'PHP':\n\t\t\t\t\t\tcase 'JSON':\n\t\t\t\t\t\tcase 'CSS':\n\t\t\t\t\t\tcase 'JS':\n\t\t\t\t\t\tcase 'SQL':\n\t\t\t\t\t\t\teditor.xtype = 'textarea'\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(col.hasOwnProperty('extraExtEditor')) {\n\t\t\t\teditor = Object.assign(editor, col.extraExtEditor)\n\t\t\t\tif(editor.visible == false) {\n\t\t\t\t\teditor.xtype = 'hidden'\n\t\t\t\t}\n\t\t\t\tif(col.extraExtEditor.hasOwnProperty('defaultValue')) {\n\t\t\t\t\teditor.value = col.extraExtEditor.defaultValue\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(config.hasOwnProperty('updateData') && config.updateData.hasOwnProperty(col.dataIndex)) {\n\t\t\t\teditor.value = config.updateData[col.dataIndex]\n\t\t\t}\n\t\t\tif(extraExt.requireConfigField.hasOwnProperty(editor.xtype)) {\n\t\t\t\tfor(const key of extraExt.requireConfigField[editor.xtype]) {\n\t\t\t\t\tif(editor.hasOwnProperty(key)) {\n\t\t\t\t\t\tif(!extraExt.empty(editor[key])) {\n\t\t\t\t\t\t\twarnConfig.push(editor.xtype + '.' + key)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twarnConfig.push(editor.xtype + '.' + key)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(warnConfig.length > 0) {\n\t\t\t\t\tconsole.warn(`ExtraExt: not set required config [${this.xtype || config.xtype}]`, warnConfig)\n\t\t\t\t}\n\t\t\t}\n\t\t\tfields.push(editor)\n\n\t\t}\n\t}\n\tObject.assign({}, config)\n\tconfig.fields = fields\n\tconfig.closeAction = 'close'\n\tconfig.listeners = {\n\t\tbeforeSubmit: function(send_data) {\n\t\t\treturn true\n\t\t},\n\t\tsuccess: function() {\n\t\t\tMODx.msg.status({\n\t\t\t\ttitle: _('extraExt.' + type),\n\t\t\t\tmessage: _('extraExt.html.success'),\n\t\t\t\tdelay: 3\n\t\t\t})\n\t\t\tExt.getCmp(this.table.id).refresh()\n\t\t\tthis.remove()\n\t\t},\n\t\tfailure: function() {\n\t\t\tMODx.msg.status({\n\t\t\t\ttitle: _('extraExt.' + type),\n\t\t\t\tmessage: _('extraExt.html.failure'),\n\t\t\t\tdelay: 3\n\t\t\t})\n\t\t\tExt.getCmp(this.table.id).refresh()\n\t\t\tthis.remove()\n\t\t},\n\t}\n\tExt.applyIf(config, {\n\t\ttitle: `${_('extraExt.create')} `,\n\t\tcloseAction: 'close',\n\t\trequestDataType: 'default',\n\t\tid: ident,\n\t\tsaveBtnText: _('extraExt.save'),\n\t\twidth: (window.innerWidth / 100) * 50,\n\t})\n\tconsole.log(this)\n\tfor(const key of requireConfigField) {\n\t\tif(config.hasOwnProperty(key)) {\n\t\t\tif(extraExt.empty(config[key])) {\n\t\t\t\terrorConfig.push(key)\n\t\t\t}\n\t\t} else {\n\t\t\terrorConfig.push(key)\n\t\t}\n\t}\n\tif(errorConfig.length > 0) {\n\t\tconsole.error(`ExtraExt: invalid required config [${this.xtype || config.xtype}]`, errorConfig)\n\t\treturn false\n\t}\n\textraExt.xTypes[extraExt.grid.editor.xtype].superclass.constructor.call(this, config) // Магия\n\tconsole.log(this.fp)\n\tif(this.hasOwnProperty('requestDataType')) {\n\t\tthis.fp.getForm().requestDataType = this.requestDataType\n\t}\n\tthis.fp.getForm().doAction = function(b, a) {\n\t\tif(b == 'submit' && this.requestDataType == 'json') {\n\t\t\tif(Ext.isString(b)) {b = new extraExt.inputs.Submit(this, a)}\n\t\t\tif(this.fireEvent('beforeaction', this, b) !== false) {\n\t\t\t\tthis.beforeAction(b)\n\t\t\t\tb.run.defer(100, b)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\t\tif(Ext.isString(b)) {b = new Ext.form.Action.ACTION_TYPES[b](this, a)}\n\t\tif(this.fireEvent('beforeaction', this, b) !== false) {\n\t\t\tthis.beforeAction(b)\n\t\t\tb.run.defer(100, b)\n\t\t}\n\t\treturn this\n\t}\n\n}\nExt.extend(extraExt.xTypes[extraExt.grid.editor.xtype], MODx.Window) // Расширяем MODX.Window\nExt.reg(extraExt.grid.editor.xtype, extraExt.xTypes[extraExt.grid.editor.xtype]) // Регистрируем новый xtype\n//# sourceMappingURL=editor.js.map\n"],"file":"editor.js"}