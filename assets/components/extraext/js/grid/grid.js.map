{"version":3,"names":[],"mappings":"","sources":["assets/components/extraext/js/grid/grid.js"],"sourcesContent":["extraExt.grid.xtype = 'extraExt-grid'\nextraExt.requireConfigField[extraExt.grid.xtype] = [\n\t'action',\n\t'url',\n\t'fields',\n\t'columns',\n]\nextraExt.xTypes[extraExt.grid.xtype] = function(config) { // Придумываем название, например, «Names»\n\tconfig = config || {}\n\tvar requireConfigField = extraExt.requireConfigField[this.xtype || config.xtype].slice()\n\tvar errorConfig = []\n\tconfig = Object.assign({\n\t\tid: Ext.id(),\n\t\textraExtSearch: false,\n\t\trequestDataType: 'default',\n\t\tsearchKey: 'query',\n\t\ttbar: [],\n\t\tcolumns: [\n\t\t\t{\n\t\t\t\tdataIndex: 'id',\n\t\t\t\theader: 'id',\n\t\t\t\tsortable: true,\n\t\t\t\trenderer: extraExt.grid.renderers.default\n\t\t\t},\n\t\t],\n\t\tfields: ['id'],\n\t\turl: MODx.config.connector_url,\n\t\taction: 'resource/getlist',\n\t\tsave_action: '',\n\t\tcreate_action: '',\n\t\tdelete_action: '',\n\t\tpaging: true,\n\t\tautoHeight: true,\n\t\tautoSize: true,\n\t\tanchor: '95%',\n\t\tautoExpandColumn: 'content',\n\t\tviewConfig: {\n\t\t\tforceFit: true,\n\t\t\tenableRowBody: true,\n\t\t\tautoFill: true,\n\t\t\tshowPreview: true,\n\t\t\tscrollOffset: 0,\n\t\t},\n\t\tremoteSort: true,\n\t\textraExtMenus: {},\n\t\tkeyField: 'id',\n\t\tnameField: 'id',\n\t\tsortBy: config.keyField,\n\t\tsortDir: 'ASC',\n\t\textraExtSearch: false,\n\t\textraExtUpdate: false,\n\t\textraExtCreate: false,\n\t\textraExtDelete: false,\n\t}, config)\n\t//add actions\n\tif(config.extraExtCreate && config.create_action) {\n\t\tconfig.tbar.unshift(\n\t\t\t{\n\t\t\t\txtype: 'button', // Перемещаем сюда нашу кнопку\n\t\t\t\ttext: _('extraExt.create'),\n\t\t\t\tcls: 'primary-button',\n\t\t\t\thandler: () => {\n\t\t\t\t\tMODx.load({\n\t\t\t\t\t\txtype: extraExt.grid.editor.xtype,\n\t\t\t\t\t\ttitle: _('extraExt.create') + ` ${config.name}`,\n\t\t\t\t\t\ttype: 'add',\n\t\t\t\t\t\ttable: this,\n\t\t\t\t\t}).show()\n\t\t\t\t},\n\t\t\t}\n\t\t)\n\t}\n\tif(config.extraExtSearch && config.searchKey) {\n\t\tconfig.extraExtSearchFn = function(tf, nv, ov) {\n\n\t\t\tvar s = this.getStore()\n\t\t\tvar val = tf.getValue()\n\t\t\tif(val) {\n\t\t\t\ts.baseParams[this.searchKey] = tf.getValue()\n\t\t\t} else {\n\t\t\t\ts.baseParams[this.searchKey] = null\n\t\t\t\tdelete s.baseParams[this.searchKey]\n\t\t\t}\n\t\t\tthis.getBottomToolbar().changePage(1)\n\t\t\tthis.refresh()\n\t\t}\n\t\tconfig.tbar.push(\n\t\t\t{\n\t\t\t\txtype: 'textfield',\n\t\t\t\temptyText: _('extraExt.search'),\n\t\t\t\tlisteners: {\n\t\t\t\t\t'change': {\n\t\t\t\t\t\tfn: function() {this.extraExtSearchFn.call(this, ...arguments)},\n\t\t\t\t\t\tscope: this\n\t\t\t\t\t},\n\t\t\t\t\t'render': {\n\t\t\t\t\t\tfn: function(cmp) {\n\t\t\t\t\t\t\tnew Ext.KeyMap(cmp.getEl(), {\n\t\t\t\t\t\t\t\tkey: Ext.EventObject.ENTER\n\t\t\t\t\t\t\t\t, fn: function() {\n\t\t\t\t\t\t\t\t\tthis.fireEvent('change', this)\n\t\t\t\t\t\t\t\t\tthis.blur()\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t, scope: cmp\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}, scope: this\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t}\n\tif(config.extraExtUpdate && config.save_action) {\n\t\tconfig.extraExtUpdateFn = function() {\n\t\t\tvar cs = this.getSelectedPrimaryKey()\n\t\t\tvar self = this\n\t\t\tvar row = this.getSelectionModel().getSelections()[0]\n\t\t\tvar data = row.data\n\t\t\tMODx.load({\n\t\t\t\txtype: extraExt.grid.editor.xtype,\n\t\t\t\ttitle: _('extraExt.update') + ` ${data[self.nameField]}`,\n\t\t\t\tupdateData: data,\n\t\t\t\ttype: 'update',\n\t\t\t\ttable: self,\n\t\t\t\trow: row,\n\t\t\t}).show()\n\t\t}\n\t\tconfig.extraExtMenus.update = (grid, rowIndex) => {\n\t\t\treturn {\n\t\t\t\ttext: _('extraExt.update'),\n\t\t\t\tgrid: grid,\n\t\t\t\trowIndex: rowIndex,\n\t\t\t\thandler: this.extraExtUpdateFn\n\t\t\t}\n\t\t}\n\t}\n\tif(config.extraExtDelete && config.delete_action) {\n\t\tconfig.extraExtDeleteFn = function() {\n\t\t\tvar cs = this.getSelectedAsList()\n\t\t\tvar self = this\n\t\t\tvar url = this.url\n\t\t\tvar params = {\n\t\t\t\taction: this.delete_action,\n\t\t\t}\n\t\t\tparams[this.keyField] = cs\n\t\t\tMODx.msg.confirm({\n\t\t\t\ttitle: _('delete'),\n\t\t\t\ttext: _('confirm_remove'),\n\t\t\t\turl: url,\n\t\t\t\tparams: params,\n\t\t\t\tlisteners: {\n\t\t\t\t\t'success': {\n\t\t\t\t\t\tfn: function(r) {\n\t\t\t\t\t\t\tif(!r.success) {\n\t\t\t\t\t\t\t\tMODx.msg.status({\n\t\t\t\t\t\t\t\t\ttitle: _('undeleted'),\n\t\t\t\t\t\t\t\t\tmessage: _('extraExt.html.failure'),\n\t\t\t\t\t\t\t\t\tdelay: 3\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tMODx.msg.status({\n\t\t\t\t\t\t\t\t\ttitle: _('delete'),\n\t\t\t\t\t\t\t\t\tmessage: _('extraExt.html.success'),\n\t\t\t\t\t\t\t\t\tdelay: 3\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.refresh()\n\t\t\t\t\t\t}, scope: true\n\t\t\t\t\t},\n\t\t\t\t\t'failure': {\n\t\t\t\t\t\tfn: function(r) {\n\t\t\t\t\t\t\tMODx.msg.status({\n\t\t\t\t\t\t\t\ttitle: _('undeleted'),\n\t\t\t\t\t\t\t\tmessage: _('extraExt.html.failure'),\n\t\t\t\t\t\t\t\tdelay: 3\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}, scope: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tconfig.extraExtMenus.delete = (grid, rowIndex) => {\n\t\t\treturn {\n\t\t\t\ttext: _('delete'),\n\t\t\t\tgrid: grid,\n\t\t\t\trowIndex: rowIndex,\n\t\t\t\thandler: this.extraExtDeleteFn\n\t\t\t}\n\t\t}\n\t}\n\tconfig.getMenu = function(grid, rowIndex) {\n\t\tvar m = []\n\t\tfor(const menu in config.extraExtMenus) {\n\t\t\tif(config.extraExtMenus.hasOwnProperty(menu)) {\n\t\t\t\tif(config.extraExtMenus[menu] instanceof Function) {\n\t\t\t\t\tm.push(config.extraExtMenus[menu](grid, rowIndex))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.addMenu(m)\n\t\treturn m\n\t}\n\tif(config.extraExtUpdate || config.extraExtCreate) {\n\t\trequireConfigField.push('nameField')\n\t\trequireConfigField.push('keyField')\n\t}\n\t//validator\n\tif(config.extraExtSearch) {\n\t\trequireConfigField.push('searchKey')\n\t}\n\tif(config.extraExtUpdate) {\n\t\trequireConfigField.push('save_action')\n\t}\n\tif(config.extraExtCreate) {\n\t\trequireConfigField.push('create_action')\n\t}\n\tif(config.extraExtDelete) {\n\t\trequireConfigField.push('delete_action')\n\t}\n\tfor(const key of requireConfigField) {\n\t\tif(config.hasOwnProperty(key)) {\n\t\t\tif(extraExt.empty(config[key])) {\n\t\t\t\terrorConfig.push(key)\n\t\t\t}\n\t\t} else {\n\t\t\terrorConfig.push(key)\n\t\t}\n\n\t}\n\tif(errorConfig.length > 0) {\n\t\tconsole.error(`ExtraExt: invalid require config [${this.xtype || config.xtype}]`, errorConfig)\n\t\treturn false\n\t}\n\t//функции\n\tthis.saveRecord = function(e) {\n\t\t\n\t\te.record.data.menu = null\n\t\tvar p = this.config.saveParams || {}\n\t\tExt.apply(e.record.data, p)\n\t\tvar url = this.config.saveUrl || this.config.url || this.config.connector\n\t\tvar params = {\n\t\t\taction: this.config.save_action\n\t\t}\n\t\tif(this.requestDataType == 'json') {\n\t\t\tvar d = Ext.util.JSON.encode(e.record.data)\n\t\t\tObject.assign(params, {data: d})\n\t\t} else {\n\t\t\tObject.assign(params, e.record.data)\n\t\t}\n\t\tMODx.Ajax.request({\n\t\t\turl: url,\n\t\t\tparams: params,\n\t\t\tlisteners: {\n\t\t\t\tsuccess: {\n\t\t\t\t\tfn: function(r) {\n\t\t\t\t\t\tthis.config.save_callback && Ext.callback(this.config.save_callback, this.config.scope || this, [r]),\n\t\t\t\t\t\t\te.record.commit(),\n\t\t\t\t\t\tthis.config.preventSaveRefresh || this.refresh(),\n\t\t\t\t\t\t\tthis.fireEvent('afterAutoSave', r)\n\t\t\t\t\t},\n\t\t\t\t\tscope: this\n\t\t\t\t},\n\t\t\t\tfailure: {\n\t\t\t\t\tfn: function(r) {\n\t\t\t\t\t\te.record.reject(),\n\t\t\t\t\t\t\tthis.fireEvent('afterAutoSave', r)\n\t\t\t\t\t},\n\t\t\t\t\tscope: this\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\tthis.getSelectedPrimaryKey = function() {\n\t\tvar selects = this.getSelectionModel().getSelections()\n\t\tif(selects.length <= 0) return false\n\t\tvar cs = ''\n\t\tfor(var i = 0; i < selects.length; i++) {\n\t\t\tcs += ',' + selects[i].data[this.keyField]\n\t\t}\n\t\tcs = cs.substr(1)\n\t\treturn cs\n\t}\n\tthis.addMenu = function(m) {\n\t}\n\textraExt.xTypes[extraExt.grid.xtype].superclass.constructor.call(this, config) // Магия\n}\nExt.extend(extraExt.xTypes[extraExt.grid.xtype], MODx.grid.Grid) // Наша табличка расширяет GridPanel\nExt.reg(extraExt.grid.xtype, extraExt.xTypes[extraExt.grid.xtype]) // Регистрируем новый xtype\nextraExt.grid.grid = extraExt.xTypes[extraExt.grid.xtype]\n//# sourceMappingURL=grid.js.map\n"],"file":"grid.js"}