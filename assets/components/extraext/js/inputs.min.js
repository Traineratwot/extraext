
extraExt.inputs={}
extraExt.inputs.modCombo={}
extraExt.inputs.modCombo.xtype='extraExt-modCombo'
extraExt.requireConfigField[extraExt.inputs.modCombo.xtype]=['action','displayField','valueField','fields','url',]
extraExt.xTypes[extraExt.inputs.modCombo.xtype]=function(config){config=config||{}
var requireConfigField=extraExt.requireConfigField[this.xtype||config.xtype].slice()
var errorConfig=[]
this.ident=config.ident||'mecnewsletter'+Ext.id()
Ext.applyIf(config,{url:MODx.config.connector_url,anchor:'99%',editable:true,pageSize:20,mode:'remote',fields:['id'],hiddenName:config.name,displayField:'id',valueField:'id',preventRender:true,forceSelection:true,enableKeyEvents:true,})
config.baseParams=Object.assign({action:config.action},config.baseParams)
config.store=new Ext.data.JsonStore({id:(config.name||Ext.id())+'-store',root:'results',autoLoad:true,autoSave:false,totalProperty:'total',fields:config.fields,url:config.url,baseParams:config.baseParams})
for(const key of requireConfigField){if(config.hasOwnProperty(key)){if(extraExt.empty(config[key])){errorConfig.push(key)}}else{errorConfig.push(key)}}
if(errorConfig.length>0){console.error(`ExtraExt: invalid require config [${this.xtype || config.xtype}]`,errorConfig)
return false}
extraExt.xTypes[extraExt.inputs.modCombo.xtype].superclass.constructor.call(this,config)}
Ext.extend(extraExt.xTypes[extraExt.inputs.modCombo.xtype],MODx.combo.ComboBox)
Ext.reg(extraExt.inputs.modCombo.xtype,extraExt.xTypes[extraExt.inputs.modCombo.xtype])
extraExt.inputs.modComboSuper={}
extraExt.inputs.modComboSuper.requireConfigField=['action','displayField','valueField','fields','url',]
extraExt.inputs.modComboSuper.xtype='extraExt-modComboSuper'
extraExt.xTypes[extraExt.inputs.modComboSuper.xtype]=function(config){var requireConfigField=extraExt.inputs.modComboSuper.requireConfigField.slice()
var errorConfig=[]
config=config||{}
config.url=MODx.config.connector_url
Ext.applyIf(config,{xtype:'superboxselect',allowBlank:true,msgTarget:'under',allowAddNewData:true,addNewDataOnBlur:true,width:'100%',editable:true,pageSize:20,preventRender:true,forceSelection:true,enableKeyEvents:true,minChars:2,hiddenName:config.name+'[]',mode:'remote',displayField:'id',valueField:'id',triggerAction:'all',extraItemCls:'x-tag',expandBtnCls:'x-form-trigger',clearBtnCls:'x-form-trigger',listeners:{newitem:function(config,v,f){bs.addItem({tag:v})}},renderTo:Ext.getBody()})
if(!config.hasOwnProperty('id')||!config.id){config.id=Ext.id()}
config.baseParams=Object.assign({action:config.action},config.baseParams)
config.store=new Ext.data.JsonStore({id:(config.name||Ext.id())+'-store',root:'results',autoLoad:true,autoSave:false,totalProperty:'total',fields:config.fields,url:config.url,baseParams:config.baseParams})
if(config.hasOwnProperty('table')&&config.table.hasOwnProperty('requestDataType')&&config.table.requestDataType=='json'){config.hiddenName=config.name}else{config.hiddenName=config.name+'[]'}
extraExt.xTypes[extraExt.inputs.modComboSuper.xtype].superclass.constructor.call(this,config)}
Ext.extend(extraExt.xTypes[extraExt.inputs.modComboSuper.xtype],Ext.ux.form.SuperBoxSelect)
Ext.reg(extraExt.inputs.modComboSuper.xtype,extraExt.xTypes[extraExt.inputs.modComboSuper.xtype])
extraExt.inputs.Submit=function(b,a){extraExt.inputs.Submit.superclass.constructor.call(this,b,a)}
Ext.extend(extraExt.inputs.Submit,Ext.form.Action.Submit,{type:'submit',run:function(){var e=this.options,g=this.getMethod(),d=g=='GET'
if(e.clientValidation===false||this.form.isValid()){if(e.submitEmptyText===false){var a=this.form.items,c=[],b=function(h){if(h.el.getValue()==h.emptyText){c.push(h)
h.el.dom.value=''}
if(h.isComposite&&h.rendered){h.items.each(b)}}
a.each(b)}
var params=this.form.baseParams
params.data=Ext.util.JSON.encode(this.form.getValues())
Ext.Ajax.request(Ext.apply(this.createCallback(e),{params:params,url:this.getUrl(d),method:g,headers:e.headers,isUpload:this.form.fileUpload}))
if(e.submitEmptyText===false){Ext.each(c,function(h){if(h.applyEmptyText){h.applyEmptyText()}})}}else{if(e.clientValidation!==false){this.failureType=Ext.form.Action.CLIENT_INVALID
this.form.afterAction(this,false)}}}})
//# sourceMappingURL=inputs.min.js.map

//# sourceMappingURL=inputs.min.js.map
